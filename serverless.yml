service: rl-stats-producer
provider:
  name: aws
  runtime: python3.8
  profile: rl-stats
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  versionFunctions: false
  endpointType: REGIONAL
  iamRoleStatements:
    - Effect: Allow
      Action:
        - states:StartExecution
        - s3:*
        - dynamodb:*
        - rds:*
      Resource:
        - '*'
    - Effect: Allow
      Action:
        - sqs:ListQueues
        - sqs:DeleteMessage
        - sqs:GetQueueUrl
        - sqs:ReceiveMessage
        - sqs:SendMessage
      Resource:
        - '*'
    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
      Resource:
        - '*'

  environment:
    SERVERLESS_REGION: ${self:provider.region}
    SERVERLESS_STAGE: ${self:provider.stage}
    SERVERLESS_ACCOUNT_ID:
      Ref: AWS::AccountId
    REPLAY_BUCKET: ${self:resources.Outputs.ReplayBucket.Value}
    EVENT_STATS_BUCKET: ${self:resources.Outputs.EventStatsBucket.Value}

plugins:
  - serverless-python-requirements

package:
  exclude:
    - node_modules/**/aws-sdk/**
    - ./src/**/*.spec.*
    - ./src/*.gzip
    - test
    - .eslintrc*
    - .prettierrc*
    - .vscode*
    - README*
    - __test__/**
    - temp/**
    - venv/**
    - .env
    - build/**
    - aws_creds.py
    - .idea/*
    - ./*.gzip

custom:
  pythonRequirements:
    dockerizePip: true

functions:
  # analyzes a replay file and produces its stats
  process-game:
    handler: handler.handler
    package: {}
    name: ${self:service}-process-game-${self:provider.stage}
    memorySize: 3008
    timeout: 60
    events:
      - s3:
          bucket: ${self:resources.Resources.ReplayBucket.Properties.BucketName}
          existing: true

resources:
  Resources:
    ReplayBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-replays-${self:provider.stage}-${self:provider.region}
    EventStatsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-event-stats-${self:provider.stage}-${self:provider.region}
  Outputs:
    ReplayBucket:
      Value:
        Ref: ReplayBucket
    EventStatsBucket:
      Value:
        Ref: EventStatsBucket
